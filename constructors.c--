#name "Constructors"
#author "Kai Tamkun"
#orcid "0000-0001-7405-6654"
#version "1.0"

struct Foo {
	s64 value;
	void print();
};

+Foo(s64 value) {
	p("Constructing "); p(this); p(" with value "); p(value); l();
	this->value = value;
}

+Foo(%Foo *other) {
	p(this); p(": absorbing from "); p(other); l();
	this->value = other->value;
}

~Foo {
	p("~"); p(this->value); p(" @ "); p(this); l();
}

void Foo::print() {
	p("["); p(this->value); p("] @ "); p(this); l();
}

void main() {
	%Foo one = %[64];
	%Foo two = %[&one];
	%Foo three = %[%Foo(32)];

	{
		%Foo *four = %Foo(10);
		p("four @ "); p(four); l();
		four::print();
	}

	%Foo *five = new %Foo(42);

	one::print();
	two::print();
	three::print();
	five::print();
}



void l() { asm("<prc $1>":'\n'); }
void p(u8 *s)     { `s(s);                   }
void p(u64 n)     { `u64(n);                 }
void p(s64 n)     { `s64(n);                 }
void p(void *ptr) { `ptr(ptr);               }
void p(u8 ch)     { `c(ch);                  }
void p(bool b)    { `s(b? "true" : "false"); }
