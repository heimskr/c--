#name "Mal"
#author "Kai Tamkun"
#orcid "0000-0001-7405-6654"
#version "1.0"

struct BlockMeta;

u64 MEMORY_ALIGN = 32;
u64 allocated = 0;
%BlockMeta* base = null;
u64 highestAllocated = 0;
void* start = null;
void* high = null;
void* end = null;

struct BlockMeta {
	u64 size;
	%BlockMeta* next;
	bool free;
};

u64 realign(u64 val, u64 alignment) {
	if (alignment == 0u64)
		return val;
	u64 offset = (val + sizeof(%BlockMeta)) % alignment;
	if (offset)
		val = val + alignment - offset;
	return val;
}

%BlockMeta* findFreeBlock(%BlockMeta** last, u64 size) {
	%BlockMeta* current = base;
	while (current && !(current->free && size <= current->size)) {
		*last = current;
		current = current->next;
	}
	return current;
}

%BlockMeta* requestSpace(%BlockMeta* last, u64 size, u64 alignment) {
	%BlockMeta* block = (%BlockMeta*) realign((u64) end, alignment);

	if (last)
		last->next = block;

	block->size = size;
	block->next = null;
	block->free = false;

	end = (u8*) block + block->size + sizeof(%BlockMeta) + 1;
	return block;
}

void* allocate(u64 size, u64 alignment) {
	%BlockMeta* block = null;

	if (size <= 0u64)
		return null;

	if (!base) {
		block = requestSpace(null, size, alignment);
		if (!block)
			return null;
		base = block;
	} else {
		%BlockMeta* last = base;
		block = findFreeBlock(&last, size);
		if (!block) {
			block = requestSpace(last, size, alignment);
			if (!block)
				return null;
		} else {
			split(block, size);
			block->free = false;
		}
	}

	allocated = allocated + block->size + sizeof(%BlockMeta);
	return block + 1;
}

void split(%BlockMeta* block, u64 size) {
	if (block->size > size + sizeof(%BlockMeta)) {
		// We have enough space to split the block, unless alignment takes up too much.
		%BlockMeta* new_block = (%BlockMeta*) realign((u64) block + size + sizeof(%BlockMeta) + 1u64, MEMORY_ALIGN);

		// After we realign, we need to make sure that the new block's new size isn't negative.

		if (block->next) {
			u64 new_size = (u64) ((void*) block->next - (void*) new_block - (s64) sizeof(%BlockMeta));

			// Realigning the new block can make it too small, so we need to make sure the new block is big enough.
			if (new_size > 0u64) {
				new_block->size = new_size;
				new_block->free = true;
				new_block->next = block->next;
				block->next = new_block;
				block->size = size;
			}
		} else {
			u64 new_size = (u64) ((void*) block + block->size - (void*) new_block);

			if (new_size > 0u64) {
				new_block->size = new_size;
				new_block->free = true;
				new_block->next = null;
				block->size = size;
				block->next = new_block;
			}
		}
	}
}

%BlockMeta* getBlock(void* ptr) {
	return (%BlockMeta*) ptr - 1;
}

void free(void* ptr) {
	if (ptr == null)
		return;
	%BlockMeta* block_ptr = getBlock(ptr);
	block_ptr->free = true;
	allocated = allocated - block_ptr->size + sizeof(%BlockMeta);
	merge();
}

u64 merge() {
	u64 count = 0u64;
	%BlockMeta* current = base;
	while (current && current->next) {
		if (current->free && current->next->free) {
			current->size = current->size + sizeof(%BlockMeta) + current->next->size;
			current->next = current->next->next;
			++count;
		} else
			current = current->next;
	}

	return count;
}

void setBounds(void* new_start, void* new_high) {
	if (new_high <= new_start) {
		`s("Invalid heap bounds: 0x");
		asm("<prx $1>":new_start);
		`s(" through 0x");
		asm("<prx $1>":new_high);
		`c('\n');
		asm("<halt>");
	}
	start = (void*) realign((s64) new_start, MEMORY_ALIGN);
	highestAllocated = (u64) start;
	high = new_high;
	end = new_start;
}

u64 getUnallocated() {
	return (u64) (high - start) - allocated;
}

void* malloc(u64 size) {
	return allocate(size, MEMORY_ALIGN);
}

void* memset(void* ptr, u8 c, u64 len) {
	asm("memset $1 x $2 -> $3":len, c, ptr);
	return ptr;
}

void* calloc(u64 count, u64 size) {
	void* chunk = malloc(count * size);
	if (chunk)
		memset(chunk, 0, count * size);
	return chunk;
}

void* checked_malloc(u64 size) {
	void* out = malloc(size);
	if (!out) {
		`s("Can't allocate ");
		`u64(size);
		`s(" bytes: out of memory\n");
		asm("<halt>");
	}
	return out;
}

void main() {
	void *g;
	void *mem;
	asm("$g -> $1"::g);
	asm("? mem -> $1"::mem);
	setBounds(g, mem);
	u64* one   = malloc(sizeof(u64));
	u32* two   = malloc(sizeof(u32));
	u16* three = malloc(sizeof(u16));
	u8*  four  = malloc(sizeof(u8));
	`u64((u64) one);   `c('\n');
	`c('('); `u64(two - one); `c(')'); `c('\n');
	`u64((u64) two);   `c('\n');
	`c('('); `u64(three - two); `c(')'); `c('\n');
	`u64((u64) three); `c('\n');
	`c('('); `u64(four - three); `c(')'); `c('\n');
	`u64((u64) four);  `c('\n');
}
