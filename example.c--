#name "Example"
#author "Kai Tamkun"
#orcid "0000-0001-7405-6654"
#version "1.0"

n: s64 = 38 + 5;
empty: bool;
dependent: s64 = n * 2;
global_addr: s64* = &dependent;

fn triple_and_add(in: s64, addend: s64): s64 {
	// return in << 1 + in + addend;
	return in * 2 + in + addend;
}

fn main(argc: u32): void {
	// Functions whose names are "." followed by a type are built-in print functions.
	val: s64 = n - 1;
	wow: s64;
	.s64(val);
	.s(" * 3 + 10 = ");
	.s64(triple_and_add(triple_and_add(val, 10), triple_and_add(0, 0)));
	.c('\n');
	return 0;
}

fn ptr_test(): void {
	ptr: s64* = &n;
	vptr: void* = ptr;
	.ptr(vptr);
}
