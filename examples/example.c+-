#name "Example"
#author "Kai Tamkun"
#orcid "0000-0001-7405-6654"
#version "6.0"

s64 n = 38 + 5;
bool empty;
s64 dependent = n * 2;
s64* global_addr = &dependent;
u64 unsigned = 60u8;

void l() {
	`c('\n');
}

s64 triple_and_add(s64 input, s64 addend) {
	return (input << 1) + input + addend;
}

void typecheck() {
	u8 u_8 = 600u16;
	s16 s_16 = 40u8;
	s32 s_32 = -10s8;
	s64* s64_ptr = (s64*) &s_32;
	void* void_ptr = s64_ptr;
	s64* recast = (s64*) void_ptr;
}

/*
void badcall() {
	`bool("Hello", empty);
}
*/

void main(u32 argc) {
	// Functions whose names are "`" followed by a type are built-in print functions.
	s64 val = n - 1;
	s64 wow;
	(void*) typecheck();
	(void*) 42;
	`s("n = "); `s64(n); l();
	`s("empty = "); `bool(empty); l();
	`s("dependent = "); `s64(dependent); l();
	`s("global_addr = "); `ptr(global_addr); l();
	`s("*global_addr = "); `s64(*global_addr); l();
	`s64(val); `s(" * 3 + 10 != "); `s64(triple_and_add(triple_and_add(val, 10), triple_and_add(0, 0))); l();
	ptr_test();
	`s("Badfib: ");      `s64(badfib(10));    l();
	`s("Conditional: "); `s64(conditional()); l();
	`s("!10 = "); `bool(!10); l();
	`s("!0  = "); `bool(!0);  l();
	// `s("z_split: "); `s64(z_split()); l();
	s32 scope_out = scope_test();
	`s("scope_out() = "); `s32(scope_out); l();
	`s("Global n = "); `s64(n); l();
	`s("~100u8 = "); `u8(~(s64)100u8); l();
	`s("6 to the void and back: "); `u32((u32) (void) 6); l();
	`bool(!!true); l();
	`s("true? 2 : 3 == "); `s64(true? 2 : 3); l();
	`s("   0? 2 : 3 == "); `s64(0? 2 : 3); l();
	wow = 100;
	`s("wow = "); `s64(wow); `s(" (should be 100)"); l();
	(&(*&wow))[0] = 200;
	`s("wow = "); `s64(wow); `s(" (should be 200)"); l();
	s32[4] arr;
	for (u64 i = 0u64; i < #arr; ++i) {
		arr[i] = (s32) (10u64 * (i + 1u64));
	}
	s32* arrptr = &arr;
	`s("Should be 30: "); `s32(arrptr[2]); l();
	return (void) 0;
}

s32 scope_test() {
	s32 n = 42;
	`s("Function-scope n = "); `s32(n); l();
	if (true) {
		u64 n = (u64) -1s64;
		`s("Block-scope n = "); `u64(n); l();
		{{{ n = 64; }}}
		`s("Block-scope n = "); `u64(n); l();
	}
	`s("Function-scope n = "); `s32(n); l();
	return n;
}

void ptr_test() {
	`s("ptr_test():\n");
	s64* ptr = &n;
	void* vptr = ptr;
	`ptr(vptr); l();
	s64 val = 12;
	s64* valptr = &val;
	s64 zero;
	*(valptr + (zero = 0)) = 16;
	`s64(val); l();
}

void forever() {
	while (true)
		`s("Hello!\n");
}

s64 badfib(s64 x) {
	if (x < 2)
		return 1;
	else
		return badfib(x - 2) + badfib(x - 1);
}

s64 conditional() {
	if (true) {
		if (false)
			return 1;
		else
			return 2;
	}
	return 3;
}

/*
s64 z_split() {
	s64 var0 = 0;
	s64 var1 = 1;
	s64 var2 = 2;
	s64 var3 = 3;
	s64 var4 = 4;
	s64 var5 = 5;
	s64 var6 = 6;
	s64 var7 = 7;
	s64 var8 = 8;
	s64 var9 = 9;
	s64 var10 = 10;
	s64 var11 = 11;
	s64 var12 = 12;
	s64 var13 = 13;
	s64 var14 = 14;
	s64 var15 = 15;
	s64 var16 = 16;
	s64 var17 = 17;
	s64 var18 = 18;
	s64 var19 = 19;
	s64 var20 = 20;
	s64 var21 = 21;
	s64 var22 = 22;
	s64 var23 = 23;
	s64 var24 = 24;
	s64 var25 = 25;
	s64 var26 = 26;
	s64 var27 = 27;
	s64 var28 = 28;
	s64 var29 = 29;
	s64 var30 = 30;
	s64 var31 = 31;
	s64 var32 = 32;
	s64 var33 = 33;
	s64 var34 = 34;
	s64 var35 = 35;
	s64 var36 = 36;
	s64 var37 = 37;
	s64 var38 = 38;
	s64 var39 = 39;
	s64 var40 = 40;
	s64 var41 = 41;
	s64 var42 = 42;
	s64 var43 = 43;
	s64 var44 = 44;
	s64 var45 = 45;
	s64 var46 = 46;
	s64 var47 = 47;
	s64 var48 = 48;
	s64 var49 = 49;
	s64 var50 = 50;
	s64 var51 = 51;
	s64 var52 = 52;
	s64 var53 = 53;
	s64 var54 = 54;
	s64 var55 = 55;
	s64 var56 = 56;
	s64 var57 = 57;
	s64 var58 = 58;
	s64 var59 = 59;
	s64 var60 = 60;
	s64 var61 = 61;
	s64 var62 = 62;
	s64 var63 = 63;
	s64 var64 = 64;
	s64 var65 = 65;
	s64 var66 = 66;
	s64 var67 = 67;
	s64 var68 = 68;
	s64 var69 = 69;
	s64 var70 = 70;
	s64 var71 = 71;
	s64 var72 = 72;
	s64 var73 = 73;
	s64 var74 = 74;
	s64 var75 = 75;
	s64 var76 = 76;
	s64 var77 = 77;
	s64 var78 = 78;
	s64 var79 = 79;
	s64 var80 = 80;
	s64 var81 = 81;
	s64 var82 = 82;
	s64 var83 = 83;
	s64 var84 = 84;
	s64 var85 = 85;
	s64 var86 = 86;
	s64 var87 = 87;
	s64 var88 = 88;
	s64 var89 = 89;
	s64 var90 = 90;
	s64 var91 = 91;
	s64 var92 = 92;
	s64 var93 = 93;
	s64 var94 = 94;
	s64 var95 = 95;
	s64 var96 = 96;
	s64 var97 = 97;
	s64 var98 = 98;
	s64 var99 = 99;
	s64 var100 = 100;
	s64 var101 = 101;
	s64 var102 = 102;
	s64 var103 = 103;
	s64 var104 = 104;
	s64 var105 = 105;
	s64 var106 = 106;
	s64 var107 = 107;
	s64 var108 = 108;
	s64 var109 = 109;
	s64 var110 = 110;
	s64 var111 = 111;
	s64 var112 = 112;
	s64 var113 = 113;
	s64 var114 = 114;
	s64 var115 = 115;
	s64 var116 = 116;
	s64 var117 = 117;
	s64 var118 = 118;
	s64 var119 = 119;
	s64 var120 = 120;
	s64 var121 = 121;
	s64 var122 = 122;
	s64 var123 = 123;
	s64 var124 = 124;
	s64 var125 = 125;
	s64 var126 = 126;
	s64 var127 = 127;
	s64 var128 = 128;
	s64 var129 = 129;
	s64 var130 = 130;
	s64 var131 = 131;
	s64 var132 = 132;
	s64 var133 = 133;
	s64 var134 = 134;
	s64 var135 = 135;
	s64 var136 = 136;
	s64 var137 = 137;
	s64 var138 = 138;
	s64 var139 = 139;
	s64 var140 = 140;
	s64 var141 = 141;
	s64 var142 = 142;
	s64 var143 = 143;
	s64 var144 = 144;
	s64 var145 = 145;
	s64 var146 = 146;
	s64 var147 = 147;
	s64 var148 = 148;
	s64 var149 = 149;
	s64 var150 = 150;
	s64 var151 = 151;
	s64 var152 = 152;
	s64 var153 = 153;
	s64 var154 = 154;
	s64 var155 = 155;
	s64 var156 = 156;
	s64 var157 = 157;
	s64 var158 = 158;
	s64 var159 = 159;
	s64 var160 = 160;
	s64 var161 = 161;
	s64 var162 = 162;
	s64 var163 = 163;
	s64 var164 = 164;
	s64 var165 = 165;
	s64 var166 = 166;
	s64 var167 = 167;
	s64 var168 = 168;
	s64 var169 = 169;
	s64 var170 = 170;
	s64 var171 = 171;
	s64 var172 = 172;
	s64 var173 = 173;
	s64 var174 = 174;
	s64 var175 = 175;
	s64 var176 = 176;
	s64 var177 = 177;
	s64 var178 = 178;
	s64 var179 = 179;
	s64 var180 = 180;
	s64 var181 = 181;
	s64 var182 = 182;
	s64 var183 = 183;
	s64 var184 = 184;
	s64 var185 = 185;
	s64 var186 = 186;
	s64 var187 = 187;
	s64 var188 = 188;
	s64 var189 = 189;
	s64 var190 = 190;
	s64 var191 = 191;
	s64 var192 = 192;
	s64 var193 = 193;
	s64 var194 = 194;
	s64 var195 = 195;
	s64 var196 = 196;
	s64 var197 = 197;
	s64 var198 = 198;
	s64 var199 = 199;
	s64 var200 = 200;
	s64 var201 = 201;
	s64 var202 = 202;
	s64 var203 = 203;
	s64 var204 = 204;
	s64 var205 = 205;
	s64 var206 = 206;
	s64 var207 = 207;
	s64 var208 = 208;
	s64 var209 = 209;
	s64 var210 = 210;
	s64 var211 = 211;
	s64 var212 = 212;
	s64 var213 = 213;
	s64 var214 = 214;
	s64 var215 = 215;
	s64 var216 = 216;
	s64 var217 = 217;
	s64 var218 = 218;
	s64 var219 = 219;
	s64 var220 = 220;
	s64 var221 = 221;
	s64 var222 = 222;
	s64 var223 = 223;
	s64 var224 = 224;
	s64 var225 = 225;
	s64 var226 = 226;
	s64 var227 = 227;
	s64 var228 = 228;
	s64 var229 = 229;
	var229 = var50 + 1 + var0;
	var228 = var50 + 1 + var1;
	var227 = var50 + 1 + var2;
	var226 = var50 + 1 + var3;
	var225 = var50 + 1 + var4;
	var224 = var50 + 1 + var5;
	var223 = var50 + 1 + var6;
	var222 = var50 + 1 + var7;
	var221 = var50 + 1 + var8;
	var220 = var50 + 1 + var9;
	var219 = var50 + 1 + var10;
	var218 = var50 + 1 + var11;
	var217 = var50 + 1 + var12;
	var216 = var50 + 1 + var13;
	var215 = var50 + 1 + var14;
	var214 = var50 + 1 + var15;
	var213 = var50 + 1 + var16;
	var212 = var50 + 1 + var17;
	var211 = var50 + 1 + var18;
	var210 = var50 + 1 + var19;
	var209 = var50 + 1 + var20;
	var208 = var50 + 1 + var21;
	var207 = var50 + 1 + var22;
	var206 = var50 + 1 + var23;
	var205 = var50 + 1 + var24;
	var204 = var50 + 1 + var25;
	var203 = var50 + 1 + var26;
	var202 = var50 + 1 + var27;
	var201 = var50 + 1 + var28;
	var200 = var50 + 1 + var29;
	var199 = var50 + 1 + var30;
	var198 = var50 + 1 + var31;
	var197 = var50 + 1 + var32;
	var196 = var50 + 1 + var33;
	var195 = var50 + 1 + var34;
	var194 = var50 + 1 + var35;
	var193 = var50 + 1 + var36;
	var192 = var50 + 1 + var37;
	var191 = var50 + 1 + var38;
	var190 = var50 + 1 + var39;
	var200 = var200 + 100;
	return var200;
}
//*/