#name "Why ISA Tests"
#author "Kai Tamkun"
#orcid "0000-0001-7405-6654"
#version "9.0"

struct String {
	u8 *data;
	u64 size;
	u64 capacity;
	~;
};

void*[8] table;
s64 delay = 300000;
u8 const *timeup = "Time's up\n";
void() *timer_ptr = int_timer;
s64(s64) *fnptr = add5;
%String input;
u64 npos = 0u64;

s64 double(s64 n) {
	return n << 1;
}

s64 add5(s64 n) {
	return n + 5;
}

void main() {
	--npos;
	void *g;
	asm("$g -> $1"::g);
	p("$g = "); p((u64) g); p('\n');
	void *mem;
	asm("? mem -> $1"::mem);
	setBounds(g, mem);
	input::init("");
	table[2] = timer_ptr;
	table[7] = int_keybrd;
	asm("%rit table");
	while (true)
		asm("<rest>");
}

s64(s64) * swap(s64(s64) *f) {
	if (f == double)
		return add5;
	return double;
}

void int_keybrd_(u64 key_full) {
	u8 key = (u8) key_full;
	bool ctrl = (bool) ((key_full >> 34u64) & 1u64);
	if (key_full == 0u64) { // Ctrl-Space, for some reason.
		fnptr = swap(fnptr);
		p("Swapped function pointers.\n");
	} else if (ctrl) {
		if (key == 'a') {
			p("You pressed ^a :)\n");
		} else if (key == '=') {
			delay = delay * 11 / 10;
			p("Delay: "); p(delay); p('\n');
		} else if (key == '-') {
			delay = delay * 10 / 11;
			p("Delay: "); p(delay); p('\n');
		} else if (key == '\x0d') { // Ctrl-Enter, for some reason.
			asm("%time $1":delay:);
		} else if (key == '8') {
			p("20 -> ");
			s64(s64) *hacked_ptr = (s64(s64) *) (((s64) fnptr << 1) + 8);
			p(((s64(s64) *) ((s64) ((s16 *) hacked_ptr - 4s16) / 2))(20));
			p('\n');
		} else if (key == 'h') {
			hack();
		} else if (key == 's') {
			%String str1 = [null, 0, 0];
			%String str2 = [null, 0, 0];
			str1::init("Hello");
			str2::init(" there");
			str1::append(&str2);
			str1::append(", how are you");
			str1::append('?');
			str1::debug();
		} else if (key == 't') {
			traverseBlocks();
		} else if (key == 'u') {
			input::clear();
			p("\e[2K\e[G");
		} else {
			p("You pressed '"); p(key); p('\''); p(" ~ "); asm("<prx $1>":key); p(" ~ "); asm("<prx $1>":key_full); l();
		}
	} else if (key == '\x7f') { // Backspace
		input::pop();
		p("\e[D \e[D");
	} else if (key == '\n') {
		l();
		%StringVec split = %[&input, " "];
		if (split.size != 0u64) {
			%String *first = split::front();
			if (first::eq("echo")) {
				u64 size = split.size;
				for (u64 i = 1u64; i < size; ++i) {
					if (i != 1u64)
						p(' ');
					split::at(i)::print();
				}
				l();
			} else if (first::eq("hash") || first::eq("hash2") || first::eq("hash3")) {
				u64 size = split.size;
				%String new_str;
				new_str::init("");

				for (u64 i = 1u64; i < size; ++i) {
					if (i != 1u64)
						new_str::append(' ');
					new_str::append(split::at(i));
				}

				p('"'); new_str::print(); p("\" -> 0x");
				if (first::eq("hash")) {
					asm("<prx $1>":hash(&new_str));
				} else if (first::eq("hash2")) {
					asm("<prx $1>":hash2(0xdeadbeefcafef00du64, 0xcafeb0bau64, new_str.data));
				} else if (first::eq("hash3")) {
					asm("<prx $1>":hash3(&new_str));
				} else {
					p("???");
				}
				l();
			} else if (first::eq("mk")) {
				mkstring(input.data);
			} else if (first::eq("noisy")) {
				%Noisy noisy = [42];
			} else if (first::eq("+")) {
				if (split.size != 3u64) {
					p("Exactly 3 arguments needed.\n");
				} else {
					%StringPtr combined = %[split::at(1u64) + split::at(2u64)];
					(*combined)::print(); l();
				}
			} else {
				p("Unknown command: \"");
				first::print();
				p("\"\n");
			}
		}
		input::clear();
	} else {
		input::append(key);
		p(key);
	}
}

void int_keybrd() #naked {
	asm("[ $rt; [ $a0");
	asm("$e2 -> $a0; :: _11int_keybrd_v1u8");
	asm("] $a0; ] $rt");
	asm(": ] %page $e0");
}

void int_timer() #naked {
	asm("[ $rt");
	asm("[ $a0");
	asm("[timeup] -> $a0");
	asm(":: `s");
	asm("[delay] -> $a0");
	asm("%time $a0");
	asm("] $a0");
	asm("] $rt");
	asm(": ] %page $e0");
}

bool hacked = false;

void hack() {
	if (hacked)
		return;
	s32 *what = (s32 *) &add5;
	p(what); p('\n');
	for (s64 i = 0; i < 1000; ++i) {
		if (*++what == 5s32)
			p("\x1b[32m");
		p((s64) what);
		p(": ");
		asm("<prx $1>":*what);
		p("\x1b[0m\n");
		if (*what == 5s32) {
			*what = 42s32;
			p("hacked =)\n");
			hacked = true;
			fnptr = add5;
			break;
		}
	}
	if (!hacked)
		p("not hacked =(\n");
}

void memcpy(void *destination, void const *source, u64 count) {
	while (8u64 <= count) {
		asm("[$1] -> [$2]":source, destination);
		count -= 8u64;
		source += 8u64;
		destination += 8u64;
	}
	while (4u64 <= count) {
		asm("[$1] -> [$2] /h":source, destination);
		count -= 4u64;
		source += 4u64;
		destination += 4u64;
	}
	while (2u64 <= count) {
		asm("[$1] -> [$2] /s":source, destination);
		count -= 2u64;
		source += 2u64;
		destination += 2u64;
	}
	while (0u64 < count) {
		asm("[$1] -> [$2] /b":source, destination);
		--count;
		++source;
		++destination;
	}
}

u8 * String::copyData(u64* new_capacity) #const {
	*new_capacity = roundUp(this->size + 1u64);
	u8 *out = checked_malloc(*new_capacity);
	if (this->data)
		memcpy(out, this->data, this->size);
	out[this->size] = '\0';
	return out;
}

u8 * String::copyData() #const {
	u8 *out = checked_malloc(this->size + 1u64);
	if (this->data)
		memcpy(out, this->data, this->size);
	out[this->size] = '\0';
	return out;
}

void String::append(%String const *source) {
	u64 required = source->size + this->size + 1u64;
	if (this->capacity < required) {
		u8 *old_data = this->data;
		this->data = this::copyData(&required);
		if (old_data)
			free(old_data);
		this->capacity = required;
	}
	memcpy(this->data + this->size, source->data, source->size);
	this->size += source->size;
	this->data[this->size] = '\0';
}

void String::append(u8 const *other) {
	u64 other_len = strlen(other);
	u64 required = other_len + this->size + 1u64;
	if (this->capacity < required) {
		u8 *old_data = this->data;
		this->data = this::copyData(&required);
		if (old_data)
			free(old_data);
		this->capacity = required;
	}
	memcpy(this->data + this->size, other, other_len);
	this->size += other_len;
	this->data[this->size] = '\0';
}

void String::append(u8 ch) {
	u64 required = this->size + 2u64;
	if (this->capacity < required) {
		u8 *old_data = this->data;
		this->data = this::copyData(&required);
		if (old_data)
			free(old_data);
		this->capacity = required;
	}
	this->data[this->size++] = ch;
	this->data[this->size] = '\0';
}

void String::set(u8 *new_data) {
	u64 required = strlen(new_data) + 1u64;
	if (this->capacity < required) {
		u8 *old_data = this->data;
		this->data = this::copyData(&required);
		if (old_data)
			free(old_data);
		this->capacity = required;
	}
	memcpy(this->data, new_data, required - 1u64);
	this->data[this->size] = '\0';
}

void String::free() {
	if (this->data) {
		free(this->data);
		this->data = null;
	}
	this->size = 0u64;
	this->capacity = 0u64;
}

void String::debug() #const {
	p(" \e[2mptr:\e[22m "); p((void *) this->data); p('\n');
	p("\e[2mdata:\e[22m "); p(this->data); p('\n');
	p("\e[2msize:\e[22m "); p(this->size); p('\n');
	p(" \e[2mcap:\e[22m "); p(this->capacity); p('\n');
}

void String::pop() {
	if (this->size != 0u64)
		this->data[--this->size] = '\0';
}

void String::clear() {
	if (this->capacity != 0u64) {
		this->size = 0u64;
		this->data[0] = '\0';
	}
}

void String::move(%String *other) {
	other->size = this->size;
	other->capacity = this->capacity;
	other->data = this->data;
	this->data = null;
	this->size = 0;
	this->capacity = 0;
}

void String::init(u8 const *data) {
	u64 const len = strlen(data);
	this->data = strcpy(data);
	this->capacity = (this->size = len) + 1u64;
}

+String(u8 const *data) {
	u64 const len = strlen(data);
	this->data = strcpy(data);
	this->size = len;
	this->capacity = len + 1u64;
}

+String() {
	this->data = null;
	this->size = 0;
	this->capacity = 0;
}

+String(u64 to_reserve) {
	this->data = checked_malloc(to_reserve + 1u64);
	this->size = to_reserve;
	this->capacity = to_reserve + 1u64;
	this->data[0] = '\0';
}

+String(%String *other) {
	this->data = checked_malloc(other->size + 1u64);
	memcpy(this->data, other->data, other->size);
	this->size = other->size;
	this->capacity = other->size + 1u64;
	this->data[this->size] = '\0';
}

%String * operator+(%String *left, %String *right) {
	p("operator+(%String *, %String *)\n");
	%String *out = new %String(left);
	out::append(right);
	return out;
}

%String * operator+=(%String *left, %String *right) {
	left::append(right);
	return left;
}

struct StringPtr {
	%String *str;
	~;
	+(%String *str);
};

+StringPtr(%String *str) {
	this->str = str;
}

~StringPtr {
	delete this->str;
}

%String * operator*(%StringPtr *sptr) {
	return sptr->str;
}

void mkstring(u8 *data) {
	%String foo = %[data];
	p("[["); foo::print(); p("]]\n");
	%String *bar = checked_malloc(sizeof(%String));
	*bar = %["Hello"];
	p("[["); bar::print(); p("]]\n");
	bar::$d();
	free(bar);
	bar = new %String("there");
	p("[["); bar::print(); p("]]\n");
	delete bar;
}

void String::print() {
	for (u64 i = 0; i < this->size; ++i)
		asm("<prc $1>":this->data[i]);
}

u64 String::find(u8 ch, u64 start) {
	for (u64 i = start; i < this->size; ++i)
		if (this->data[i] == ch)
			return i;
	return npos;
}

// Probably rather inefficient.
u64 String::find(u8 const *str, u64 start) {
	u64 const len = strlen(str);
	if (len == 0u64 || this->size < len)
		return npos;

	for (u64 i = start; i <= this->size - len; ++i) {
		bool should_return = true;
		for (u64 j = 0u64; j < len; ++j)
			if (this->data[i + j] != str[j]) {
				should_return = false;
				break;
			}
		if (should_return)
			return i;
	}
	return npos;
}

u64 String::find(%String *str, u64 start) {
	u64 const len = str->size;
	u64 const max = this->size - len;
	if (len == 0u64)
		return npos;
	for (u64 i = start; i <= max; ++i) {
		bool should_return = true;
		for (u64 j = 0u64; j < len; ++j)
			if (this->data[i + j] != str->data[j]) {
				should_return = false;
				break;
			}
		if (should_return)
			return i;
	}
	return npos;
}

bool String::empty() {
	return this->size == 0u64;
}

void String::reserve(u64 size) {
	++size;
	if (this->capacity < size) {
		u8 *old_data = this->data;
		this->data = this::copyData(&size);
		if (old_data)
			free(old_data);
		this->capacity = size;
	}
}

%String * String::substr(u64 start, u64 len) {
	%String *out = new %String("");
	out::reserve(len);

	for (u64 i = 0; i < len; ++i) {
		if (this->size <= i + start)
			break;
		out::append(this->data[start + i]);
	}

	return out;
}

void String::eviscerate() {
	this::free();
	free(this);
}

bool String::eq(u8 *other) #const {
	if (!this->data || !other)
		return false;

	for (u64 i = 0; i < this->size; ++i)
		if (other[i] == '\0' || other[i] != this->data[i])
			return false;
	return true;
}

bool String::eq(%String *other) #const {
	if (this->size != other->size)
		return false;
	if (this->data == other->data)
		return true; // Shouldn't happen.
	for (u64 i = 0; i < this->size; ++i)
		if (this->data[i] != other->data[i])
			return false;
	return true;
}

~String {
	if (this->data) {
		free(this->data);
		this->data = null;
	}
}

u8 String::at(u64 index) {
	if (this->size <= index)
		panic("Invalid index in String::at");
	return this->data[index];
}

struct StringVec {
	%String *data;
	u64 size;
	u64 capacity;
};

~StringVec {
	this::freeData();
}

+StringVec() {
	this->data = null;
	this->size = 0;
	this->capacity = 0;
}

%String * StringVec::at(u64 index) {
	if (this->size <= index)
		panic("Invalid index in StringVec::at");
	return &this->data[index];
}

%String * StringVec::front() {
	if (this->size == 0u64)
		panic("Container empty in StringVec::front");
	return this->data;
}

%String * StringVec::back() {
	if (this->size == 0u64)
		panic("Container empty in StringVec::back");
	return &this->data[this->size - 1u64];
}

%String * StringVec::copyData(u64 *new_capacity) #const {
	%String *out = checked_malloc((*new_capacity = roundUp(this->size + 1u64)) * sizeof(%String));
	if (this->data)
		memcpy(out, this->data, this->size * sizeof(%String));
	return out;
}

void StringVec::freeData() {
	if (!this->data)
		return;
	for (u64 i = 0; i < this->size; ++i)
		this->data[i]::free();
	free(this->data);
	this->data = null;
}

void StringVec::adjust(u64 *required) {
	if (this->capacity < *required || !this->data) {
		%String *new_data = this::copyData(required);
		if (this->data)
			free(this->data);
		this->data = new_data;
		this->capacity = *required;
	}
}

void StringVec::absorb(%String *str) {
	u64 required = this->size + 1u64;
	this::adjust(&required);
	memcpy(&this->data[this->size++], str, sizeof(%String));
	str->data = null;
	str->size = 0;
	str->capacity = 0;
}

void StringVec::push(%String *str) {
	u64 required = this->size + 1u64;
	this::adjust(&required);
	u8 *data_copy = str::copyData();
	u64 s = strlen(data_copy);
	this->data[this->size].data = data_copy;
	this->data[this->size].size = str->size;
	this->data[this->size].capacity = str->size + 1u64;
	++this->size;
}

void StringVec::push(u8 *str) {
	u64 required = this->size + 1u64;
	this::adjust(&required);
	this->data[this->size++]::init(str);
	this->capacity = required;
}

void StringVec::eviscerate() {
	this::freeData();
	this->size = 0;
	this->capacity = 0;
	free(this);
}

+StringVec(%String *str, u8 const *delimiter) {
	this::$c();
	%StringVec::split(this, str, delimiter);
}

static void StringVec::split(%StringVec *sv, %String *str, u8 const *delimiter) {
	if (str::empty())
		return;

	// Something interesting: if I use 0(s64) as the second argument or leave out the second argument altogether,
	// the overloading logic finds *multiple* candidates instead of the expected zero candidates.
	u64 next = str::find(delimiter, 0u64);
	if (next == npos) {
		sv::push(str);
		return;
	}

	u64 const delimiter_size = strlen(delimiter);
	u64 last = 0u64;

	sv::push(str::substr(0u64, next));

	while (next != npos) {
		last = next;
		next = str::find(delimiter, last + delimiter_size);
		%String *sub = str::substr(last + delimiter_size, next - last - delimiter_size);
		sv::absorb(sub);
		free(sub);
	}
}

struct Noisy {
	s64 value;
};

~Noisy {
	p("Deleting Noisy instance with value of ");
	p(this->value);
	l();
}

struct UniquePtr {
	void *ptr;
};

~UniquePtr {
	if (this->ptr) {
		free(this->ptr);
		this->ptr = null;
	}
}

void panic(u8 const *message) {
	p("\e[31mERROR\e[0m: ");
	p(message);
	p('\n');
	asm("<halt>");
}

u64 strlen(u8 const *string) {
	u64 out = 0u64;
	for (; string[out]; ++out);
	return out;
}

u8 * strcpy(u8 const *string) {
	u64 const len = strlen(string);
	u8 *out = checked_malloc(len + 1u64);
	memcpy(out, string, len);
	out[len] = '\0';
	return out;
}

void l() { asm("<prc $1>":'\n'); }
void p(u8 const *s)     { `s(s);                   }
void p(u64 n)           { `u64(n);                 }
void p(s64 n)           { `s64(n);                 }
void p(void const *ptr) { `ptr(ptr);               }
void p(u8 ch)           { `c(ch);                  }
void p(bool b)          { `s(b? "true" : "false"); }

struct BlockMeta;

u64 MEMORY_ALIGN = 32u64;
u64 allocated = 0u64;
%BlockMeta *base = null;
u64 highestAllocated = 0u64;
void *start = null;
void *high = null;
void *end = null;

struct BlockMeta {
	u64 size;
	%BlockMeta *next;
	bool free;
};

u64 realign(u64 val, u64 alignment) {
	if (alignment == 0u64)
		return val;
	// p("\e[2mrealign: "); asm("<prx $1>":val); p(" -> ");
	u64 offset = (val + sizeof(%BlockMeta)) % alignment;
	if (offset)
		val += alignment - offset;
	// asm("<prx $1>":val); p("\e[22m\n");
	return val;
}

%BlockMeta * findFreeBlock(%BlockMeta **last, u64 size) {
	%BlockMeta *current = base;
	// asm("$1 -> $k0; <print $k0>":&current->next);
	// p("Start: "); p(current); p('\n');
	while (current && !(current->free && size <= current->size)) {
		*last = current;
		current = current->next;
		// asm("$1 -> $k1; <print $k1>":current);
		// p("Current: "); p(current); p('\n');
	}
	return current;
}

%BlockMeta * requestSpace(%BlockMeta *last, u64 size, u64 alignment) {
	%BlockMeta *block = (%BlockMeta *) realign((u64) end, alignment);

	if (last)
		last->next = block;

	block->size = size;
	block->next = null;
	block->free = false;

	end = (u8 *) block + block->size + sizeof(%BlockMeta) + 1;
	return block;
}

void * allocate(u64 size, u64 alignment) {
	%BlockMeta *block = null;

	if (!base) {
		block = requestSpace(null, size, alignment);
		if (!block)
			return null;
		base = block;
	} else {
		%BlockMeta *last = base;
		block = findFreeBlock(&last, size);
		if (!block) {
			block = requestSpace(last, size, alignment);
			if (!block)
				return null;
		} else {
			split(block, size);
			block->free = false;
		}
	}

	allocated += block->size + sizeof(%BlockMeta);
	return block + 1;
}

void traverseBlocks() {
	%BlockMeta *block = base;
	p("Total allocated: "); p(allocated); p('\n');
	while (block) {
		p(block); p(' '); p(block->free); p(' '); p(block->size); p('\n');
		block = block->next;
	}
}

void split(%BlockMeta *block, u64 size) {
	if (block->size > size + sizeof(%BlockMeta)) {
		// We have enough space to split the block, unless alignment takes up too much.
		%BlockMeta *new_block = (%BlockMeta *) realign((u64) block + size + sizeof(%BlockMeta) + 1u64, MEMORY_ALIGN);

		// After we realign, we need to make sure that the new block's new size isn't negative.

		if (block->next) {
			u64 const new_size = (u64) ((void *) block->next - (void *) new_block - (s64) sizeof(%BlockMeta));
			// Realigning the new block can make it too small, so we need to make sure the new block is big enough.
			if (new_size > 0u64) {
				new_block->size = new_size;
				new_block->free = true;
				new_block->next = block->next;
				block->next = new_block;
				block->size = size;
			}
		} else {
			u64 const new_size = (u64) ((void *) block + block->size - (void *) new_block);
			if (new_size > 0u64) {
				new_block->size = new_size;
				new_block->free = true;
				new_block->next = null;
				block->size = size;
				block->next = new_block;
			}
		}
	}
}

%BlockMeta * getBlock(void *ptr) {
	return (%BlockMeta *) ptr - 1;
}

void free(void *ptr) {
	if (ptr == null)
		return;
	%BlockMeta *block_ptr = getBlock(ptr);
	block_ptr->free = true;
	if (!block_ptr->next)
		end = block_ptr;
	allocated -= block_ptr->size + sizeof(%BlockMeta);
	merge();
}

u64 merge() {
	u64 count = 0u64;
	%BlockMeta *current = base;
	while (current && current->next && current->next != base) {
		// asm("$1 -> $k3; $2 -> $m9; <print $k3>; <print $m9>":current, current->next);
		if (current->free && current->next->free) {
			current->size += sizeof(%BlockMeta) + current->next->size;
			current->next = current->next->next;
			++count;
		} else
			current = current->next;
	}

	return count;
}

void setBounds(void *new_start, void *new_high) {
	if (new_high <= new_start) {
		p("Invalid heap bounds: 0x");
		asm("<prx $1>":new_start);
		p(" through 0x");
		asm("<prx $1>":new_high);
		p('\n');
		asm("<halt>");
	}
	start = (void *) realign((u64) new_start, MEMORY_ALIGN);
	highestAllocated = (u64) start;
	high = new_high;
	end = new_start;
}

u64 getUnallocated() {
	return (u64) (high - start) - allocated;
}

void * malloc(u64 size) {
	return allocate(size, MEMORY_ALIGN);
}

void * memset(void *ptr, u8 c, u64 len) {
	asm("memset $1 x $2 -> $3":len, c, ptr);
	return ptr;
}

void * calloc(u64 count, u64 size) {
	void *chunk = malloc(count * size);
	if (chunk)
		memset(chunk, 0, count * size);
	return chunk;
}

void * checked_malloc(u64 size) {
	void *out = malloc(size);
	if (!out) {
		p("Can't allocate ");
		p(size);
		p(" bytes: out of memory\n");
		asm("<halt>");
	}
	return out;
}

u64 roundUp(u64 value) {
	--value;
	value |= value >> 1u64;
	value |= value >> 2u64;
	value |= value >> 4u64;
	value |= value >> 8u64;
	value |= value >> 16u64;
	value |= value >> 32u64;
	return value + 1u64;
}

u64 hash(%String *str) {
	if (!str->data)
		return 0u64;
	s32 p = 31s32;
	s32 m = 1000000009s32;
	s64 pp = 1;
	s64 hv = 0;
	for (u32 i = 0u32; i < (u32) str->size; ++i) {
		hv = (hv + ((s64) (str->data[i] - 'a' + 1u8)) * pp) % (s64) m;
		pp = (pp * (s64) p) % (s64) m;
	}

	return (hv % (s64) m + (s64) m) % (s64) m;
}

u32 hash2(u64 salt0, u64 salt1, u8 *key) {
	u32 result = (u32) ((salt0 >> 32u64 & 0xffffffff00000000u64) ^ (salt0 & 0xffffffffu64)
		^ (salt1 >> 32u64 & 0xffffffff00000000u64) ^ (salt1 & 0xffffffffu64));
	for (u32 i = 0; key[i] != 0u8; ++i)
		result ^= (u32) key[i] << ((i % 4u32) * 8u32);
	return result;
}

u32 hash3(u8 const *key, u64 length) {
	u32 hash = 2166136261u32;
	for (u64 i = 0; i < length; ++i) {
		hash ^= key[i];
		hash *= 16777619u32;
	}
	return hash;
}

u32 hash3(%String *str) {
	return hash3(str->data, str->size);
}
