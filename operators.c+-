#name "Operator Overloading"
#author "Kai Tamkun"
#orcid "0000-0001-7405-6654"
#version "3.1"

struct Foo {
	s64 value;
};

s64 operator+(%Foo *left, %Foo *right) {
	return left->value + right->value;
}

%Foo * operator+= (%Foo *left, s64 right) { left->value +=  right; return left; }
%Foo * operator-= (%Foo *left, s64 right) { left->value -=  right; return left; }
%Foo * operator*= (%Foo *left, s64 right) { left->value *=  right; return left; }
%Foo * operator/= (%Foo *left, s64 right) { left->value /=  right; return left; }
%Foo * operator%= (%Foo *left, s64 right) { left->value %=  right; return left; }
%Foo * operator&= (%Foo *left, s64 right) { left->value &=  right; return left; }
%Foo * operator|= (%Foo *left, s64 right) { left->value |=  right; return left; }
%Foo * operator^= (%Foo *left, s64 right) { left->value ^=  right; return left; }
%Foo * operator<<=(%Foo *left, s64 right) { left->value <<= right; return left; }
%Foo * operator>>=(%Foo *left, s64 right) { left->value >>= right; return left; }

s64 operator*(%Foo *foo) {
	return 0 - foo->value;
}

%Foo * operator=(%Foo *left, s64 right) {
	left->value = right;
	return left;
}

s64  operator<<(%Foo *left, s64   right) { return left->value << right;        }
s64  operator>>(%Foo *left, s64   right) { return left->value >> right;        }
s64  operator *(%Foo *left, %Foo *right) { return left->value *  right->value; }
s64  operator /(%Foo *left, %Foo *right) { return left->value /  right->value; }
s64  operator %(%Foo *left, %Foo *right) { return left->value %  right->value; }
bool operator&&(%Foo *left, %Foo *right) { return left->value && right->value; }
bool operator||(%Foo *left, %Foo *right) { return left->value || right->value; }
bool operator^^(%Foo *left, %Foo *right) { return left->value ^^ right->value; }
s64  operator &(%Foo *left, %Foo *right) { return left->value &  right->value; }
s64  operator |(%Foo *left, %Foo *right) { return left->value |  right->value; }
s64  operator ^(%Foo *left, %Foo *right) { return left->value ^  right->value; }
s64  operator ~(%Foo *foo) { return ~foo->value; }
bool operator !(%Foo *foo) { return !foo->value; }
bool operator <(%Foo *left, s64   right) { return left->value <  right; }
bool operator >(%Foo *left, s64   right) { return left->value >  right; }
bool operator<=(%Foo *left, s64   right) { return left->value <=  right; }
bool operator>=(%Foo *left, s64   right) { return left->value >= right; }
bool operator==(%Foo *left, s64   right) { return left->value == right; }
bool operator!=(%Foo *left, s64   right) { return left->value != right; }
%Foo * operator->(%Foo *foo) { return foo; }
%Foo * operator++.(%Foo *foo) { ++foo->value; return foo; }
%Foo * operator--.(%Foo *foo) { --foo->value; return foo; }
s64 operator.++(%Foo *foo) { return foo->value++; }
s64 operator.--(%Foo *foo) { return foo->value--; }
bool operator[](%Foo *foo, s64 index) {
	return (foo->value >> index) & 1;
}

u64 operator#(%Foo *foo) {
	s64 count = 0;
	u64 value = (u64) foo->value;
	while (value) {
		if (value & 1u64)
			++count;
		value >>= 1u64;
	}
	return count;
}

void main() {
	%Foo one = [10];
	%Foo two = [20];
	one += 40;
	one -= 5;
	p("one: "); p(one.value);
	p("two: "); p(two.value);
	p("one + two: "); p(one + two);
	p("one << 1: "); p(one << 1);
	p("one * two: "); p(one * two);
	p("*two: "); p(*two);
	p("one / two: "); p(one / two);
	p("one % two: "); p(one % two);
	p("one && two: "); p(one && two);
	p("one || two: "); p(one || two);
	p("one ^^ two: "); p(one ^^ two);
	p("one & two: "); p(one & two);
	p("one | two: "); p(one | two);
	p("one ^ two: "); p(one ^ two);
	p("~one: "); p(~one);
	p("!one: "); p(!one);
	p("one >> 2: "); p(one >> 2);
	p("one > 40: "); p(one > 40);
	p("one < 40: "); p(one < 40);
	p("one >= 45: "); p(one >= 45);
	p("one <= 44: "); p(one <= 44);
	p("one == 45: "); p(one == 45);
	p("one != 45: "); p(one != 45);
	p("Setting one to 31.\n");
	one = 31;
	p("one: "); p(one.value);
	one ^= 1; p(one.value);
	one &= ~7; p(one.value);
	one |= 3; p(one.value);
	one *= 2; p(one.value);
	one /= 2; p(one.value);
	one %= 20; p(one.value);
	one <<= 5; p(one.value);
	one >>= 1; p(one.value);
	one += 1; p(one.value);
	one -= 50; p(one.value);
	++one; p(one.value);
	--one; p(one.value);
	p("one++: "); `s64(one++); p(" -> "); p(one.value);
	p("one--: "); `s64(one--); p(" -> "); p(one.value);
	one.value &= ~3;
	p(one.value);
	p("#one: "); p(#one);
	p("one[1]: "); p(one[1]);
	p("one[2]: "); p(one[2]);
}

void l() { asm("<prc $1>":10); }
void p(s64  value) { asm("<prd $1>":value);   l(); }
void p(u64  value) { asm("<prd $1>":value);   l(); }
void p(bool b)     { `s(b? "true" : "false"); l(); }
void p(u8 const *str) { `s(str); }
